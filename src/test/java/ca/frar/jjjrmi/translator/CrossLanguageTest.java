/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.frar.jjjrmi.translator;

import ca.frar.jjjrmi.exceptions.DecoderException;
import ca.frar.jjjrmi.exceptions.EncoderException;
import ca.frar.jjjrmi.exceptions.JJJRMIException;
import ca.frar.jjjrmi.testclasses.ArrayWrapper;
import ca.frar.jjjrmi.testclasses.Has;
import ca.frar.jjjrmi.testclasses.HasNone;
import ca.frar.jjjrmi.testclasses.None;
import ca.frar.jjjrmi.testclasses.Primitives;
import ca.frar.jjjrmi.testclasses.PrimitivesExtended;
import ca.frar.jjjrmi.testclasses.Simple;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

/**
 *
 * @author Ed Armstrong
 */
public class CrossLanguageTest {

    public Object get(Translator translator, String methodName) throws IOException, DecoderException {
        Process exec = Runtime.getRuntime().exec("node src/test/js/CrossLanguageTest.js");

        OutputStream outputStream = exec.getOutputStream();
        PrintStream printStream = new PrintStream(outputStream);
        printStream.println(methodName);
        printStream.flush();

        InputStream errorStream = exec.getErrorStream();
        InputStreamReader esr = new InputStreamReader(errorStream);
        BufferedReader besr = new BufferedReader(esr);

        String errline = besr.readLine();
        while (errline != null) {
            System.out.println(errline);
            errline = besr.readLine();
        }        
        
        InputStream inputStream = exec.getInputStream();
        InputStreamReader isr = new InputStreamReader(inputStream);
        BufferedReader br = new BufferedReader(isr);

        StringBuilder builder = new StringBuilder();
        String line = br.readLine();
        while (line != null) {
            builder.append(line).append("\n");
            line = br.readLine();
        }

        String encoded = builder.toString();
        return translator.decode(encoded).getRoot();
    }

    /*
        Retrieve classes generated by JavaScript.
     */
    @Test
    public void test_get_simple() throws EncoderException, DecoderException, IOException { 
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_simple");
        assertEquals(Simple.class, decoded.getClass());
    }
        
    /*
        Retrieve classes generated by JavaScript
     */
    @Test
    public void test_get_none() throws EncoderException, DecoderException, IOException {
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_none");
        assertEquals(None.class, decoded.getClass());
    }
    
    @Test
    public void test_get_has_none() throws EncoderException, DecoderException, IOException {
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_has_none");
        assertEquals(HasNone.class, decoded.getClass());
    }
    
    /**
     * Retrieve classes generated by JavaScript
     * Make sure the values are not default values by using the Simple.equals
     * method.
     * @throws EncoderException
     * @throws DecoderException
     * @throws IOException 
     */
    @Test
    public void test_get_primitives() throws EncoderException, DecoderException, IOException {
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_primitives");
        assertEquals(Primitives.class, decoded.getClass());
        assertEquals(new Primitives(7), decoded);
    }     
    
    @Test
    public void test_array_as_field_00() throws JJJRMIException, IOException {
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_array_field");
        assertEquals(ArrayWrapper.class, decoded.getClass());
    }
    
    /**
     * Primitives Extended class only has values from the parent class.  All 
     * values should be available and the same.
     * @throws JJJRMIException
     * @throws IOException 
     */
    @Test
    public void test_primitives_from_super() throws JJJRMIException, IOException {
        Translator translator = new Translator();
        Object decoded = this.get(translator, "get_primitives_extended");
        assertEquals(PrimitivesExtended.class, decoded.getClass());
        assertEquals(new Primitives(65), decoded);
    }    
    
    @Test
    public void test_null() throws JJJRMIException, IOException {
        Translator translator = new Translator();
        Has<?> decoded = (Has<?>) this.get(translator, "get_has_null");
        assertEquals(null, decoded.get());
    }    
}
