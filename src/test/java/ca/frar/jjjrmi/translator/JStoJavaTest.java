/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.frar.jjjrmi.translator;

import ca.frar.jjjrmi.exceptions.DecoderException;
import ca.frar.jjjrmi.exceptions.EncoderException;
import ca.frar.jjjrmi.exceptions.JJJRMIException;
import ca.frar.jjjrmi.testclasses.ArrayWrapper;
import ca.frar.jjjrmi.testclasses.Has;
import ca.frar.jjjrmi.testclasses.HasNone;
import ca.frar.jjjrmi.testclasses.None;
import ca.frar.jjjrmi.testclasses.Primitives;
import ca.frar.jjjrmi.testclasses.PrimitivesExtended;
import ca.frar.jjjrmi.testclasses.Simple;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

/**
 *
 * @author Ed Armstrong
 */
public class JStoJavaTest {

    /*
        Retrieve classes generated by JavaScript.
     */
    @Test
    public void test_get_simple() throws EncoderException, DecoderException, IOException, InterruptedException { 
        Object decoded = new JSGetter().cmd("get_simple").exit().getRoot();
        assertEquals(Simple.class, decoded.getClass());
    }
        
    /*
        Retrieve classes generated by JavaScript
     */
    @Test
    public void test_get_none() throws EncoderException, DecoderException, IOException, InterruptedException {
        Object decoded = new JSGetter().cmd("get none").exit().getRoot();
        assertEquals(None.class, decoded.getClass());
    }
    
    @Test
    public void test_get_has_none() throws EncoderException, DecoderException, IOException, InterruptedException {
        Translator translator = new Translator();
        Object decoded = new JSGetter().cmd("get_has_none").exit().getRoot();
        assertEquals(HasNone.class, decoded.getClass());
    }
    
    /**
     * Retrieve classes generated by JavaScript
     * Make sure the values are not default values by using the Simple.equals
     * method.
     * @throws EncoderException
     * @throws DecoderException
     * @throws IOException 
     */
    @Test
    public void test_get_primitives() throws EncoderException, DecoderException, IOException, InterruptedException {
        Object decoded = new JSGetter().cmd("get_primitives").exit().getRoot();
        assertEquals(Primitives.class, decoded.getClass());
        assertEquals(new Primitives(7), decoded);
    }     
    
    @Test
    public void test_array_as_field_00() throws JJJRMIException, IOException, InterruptedException {
        Object decoded = new JSGetter().cmd("get_array_field").exit().getRoot();
        assertEquals(ArrayWrapper.class, decoded.getClass());
    }
    
    /**
     * Primitives Extended class only has values from the parent class.  All 
     * values should be available and the same.
     * @throws JJJRMIException
     * @throws IOException 
     */
    @Test
    public void test_primitives_from_super() throws JJJRMIException, IOException, InterruptedException {
        Object decoded = new JSGetter().cmd("get_primitives_extended").exit().getRoot();
        assertEquals(PrimitivesExtended.class, decoded.getClass());
        assertEquals(new Primitives(65), decoded);
    }    
    
    @Test
    public void test_null() throws JJJRMIException, IOException, InterruptedException {
        Has<?> decoded = (Has<?>) new JSGetter().cmd("get_has_null").exit().getRoot();
        assertEquals(null, decoded.get());
    }    
    
    /**
     * The same object encoded twice.  The second encoding will be a reference
     * to the first encoding.  Any changes made to the first returned encoding
     * will be kept.
     * 
     * @throws JJJRMIException 
     */
    @Test
    public void test_reference_as_root() throws JJJRMIException {
//        Translator translator = new Translator();
//        Has<Object> object = new Has<>(null);
//        translator.encode(object);
//        TranslatorResult encoded = translator.encode(object);
//        Object decoded = translator.decode(encoded.toString()).getRoot();
//        assertEquals(object, decoded);
    }    
}
